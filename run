#!/bin/bash

install_python() {
  if python --version | grep -q '3.10'; then
    echo "Python 3.10 is already installed."
  else
    if command -v brew >/dev/null; then
      brew install xz
      brew install pyenv
    else
      curl https://pyenv.run | bash
  
      # Check if apt command exists before executing apt commands
      if command -v apt >/dev/null; then
        sudo apt update
        sudo apt install -y build-essential libssl-dev zlib1g-dev \
        libbz2-dev libreadline-dev libsqlite3-dev curl \
        libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
      else
        echo "apt command not found. Skipping package installation."
      fi
    fi

    # Check if .bashrc exists before appending
    if [ -f "$HOME/.bashrc" ]; then
      {
        echo "export PYENV_ROOT=\"\$HOME/.pyenv\""
        echo "command -v pyenv >/dev/null || export PATH=\"\$PYENV_ROOT/bin:\$PATH\""
        echo "eval \"\$(pyenv init -)\""
      } >> ~/.bashrc
      source ~/.bashrc
    fi

    # Check if .profile exists before appending
    if [ -f "$HOME/.profile" ]; then
      {
        echo "export PYENV_ROOT=\"\$HOME/.pyenv\""
        echo "command -v pyenv >/dev/null || export PATH=\"\$PYENV_ROOT/bin:\$PATH\""
        echo "eval \"\$(pyenv init -)\""
      } >> ~/.profile
      source ~/.profile
    fi

    # Check if .zshrc exists before appending
    if [ -f "$HOME/.zshrc" ]; then
      {
        echo "export PYENV_ROOT=\"\$HOME/.pyenv\""
        echo "command -v pyenv >/dev/null || export PATH=\"\$PYENV_ROOT/bin:\$PATH\""
        echo "eval \"\$(pyenv init -)\""
      } >> ~/.zshrc
      source ~/.zshrc
    fi

    # Check if .zprofile exists before appending
    if [ -f "$HOME/.zprofile" ]; then
      {
        echo "export PYENV_ROOT=\"\$HOME/.pyenv\""
        echo "command -v pyenv >/dev/null || export PATH=\"\$PYENV_ROOT/bin:\$PATH\""
        echo "eval \"\$(pyenv init -)\""
      } >> ~/.zprofile
      source ~/.zprofile
    fi

    pyenv install 3.10
    pyenv global 3.10
  fi

  # Ensure pip is available before attempting to install requirements
  if command -v pip >/dev/null; then
    pip install -r requirements.txt
  else
    echo "pip is not available, skipping requirements installation."
  fi
}

run_program() {
  python start.py
}

while true; do
  echo "Select an option:"
  echo "1) Install"
  echo "2) Run"
  echo "3) Exit"
  read -rp "Enter your choice: " choice

  case $choice in
    1)
      install_python
      ;;
    2)
      run_program
      ;;
    3)
      exit 0
      ;;
    *)
      echo "Invalid option. Please try again."
      ;;
  esac
done
